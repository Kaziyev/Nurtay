#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Wi-Fi credentials for RGB control
const char* ssid = "Borealis Laboratory";
const char* password = "artofwar3";
WebServer server(80);

// Static IP configuration
IPAddress local_IP(192, 168, 0, 54);
IPAddress gateway(192, 168, 0, 1);
IPAddress subnet(255, 255, 255, 0);

// RGB LED pins
const int redPin = 21;
const int greenPin = 18;
const int bluePin = 2;

int currentRed = 255;
int currentGreen = 255;
int currentBlue = 255;
int brightness = 100;
bool isLightOn = true;
String currentMode = "static";  // Default mode

// Button pins
const int buttonForwardPin = 25;  // Button to cycle colors forward
const int buttonReversePin = 32;  // Button to cycle colors in reverse

// Colors array for cycling
const int numColors = 7;
int colors[numColors][3] = {
  {255, 0, 0},     // Red
  {0, 255, 0},     // Green
  {0, 0, 255},     // Blue
  {255, 255, 0},   // Yellow
  {255, 165, 0},   // Orange
  {128, 0, 128},   // Purple
  {255, 255, 255}  // White
};

int colorIndex = 0;  // Start with the first color in the array

// Debounce variables
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 200;  // 200 ms debounce time

// Timing variables for non-blocking modes
unsigned long previousMillis = 0;
const long interval = 50;  // Smooth transition interval (50ms for smoother effects)

// Timing for breathing effect, flashing, and color transitions
unsigned long breathingMillis = 0;
unsigned long flashMillis = 0;
unsigned long colorChangeMillis = 0;
unsigned long rainbowMillis = 0;

// Interval for breathing and flashing effects
const long breathingInterval = 40;  // Breathing speed (lower = faster)
const long flashingInterval = 500;  // Flashing speed (500ms = 2 flashes per second)
const long colorCycleInterval = 100; // Color Cycle transition speed
const long rainbowInterval = 150;    // Rainbow transition speed

// I2C LCD Initialization
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Adjust the I2C address based on your LCD

// Voltage monitoring parameters
const float voltageMin = 11.5;
const float voltageMax = 12.1;
float voltage = 12.0;  // Simulated voltage value

// Timing for LCD update
unsigned long previousLcdMillis = 0;  // Track last time the LCD was updated
const long lcdUpdateInterval = 1000;  // Update every 1000 milliseconds (1 second)

// Function prototypes
void applyColor(int red, int green, int blue);
void setStaticColor();
void setBreathingEffect();
void setFlashingMode();
void setColorCycle();
void setRainbowMode();
void updateMode();
void setColorFromIndex();
int smoothTransition(int currentValue, int targetValue, int step);  // Prototype added

// Function to apply RGB color to LEDs
void applyColor(int red, int green, int blue) {
  analogWrite(redPin, (red * brightness) / 100);
  analogWrite(greenPin, (green * brightness) / 100);
  analogWrite(bluePin, (blue * brightness) / 100);
}

// Function to smoothly transition between color values
int smoothTransition(int currentValue, int targetValue, int step) {
  if (currentValue < targetValue) {
    return min(currentValue + step, targetValue);
  } else if (currentValue > targetValue) {
    return max(currentValue - step, targetValue);
  }
  return currentValue;
}

// Function to set the current color based on the color index
void setColorFromIndex() {
  currentRed = colors[colorIndex][0];
  currentGreen = colors[colorIndex][1];
  currentBlue = colors[colorIndex][2];
  applyColor(currentRed, currentGreen, currentBlue);
}

// RGB LED Mode Functions (breathing, flashing, cycle, rainbow)
void setBreathingEffect() {
  if (!isLightOn) {
    applyColor(0, 0, 0);
    return;
  }
  static int brightnessValue = 0;
  static bool increasing = true;
  static int colorIndex = 0;
  unsigned long currentMillis = millis();

  int colors[3][3] = { 
    {255, 0, 0},    // Red
    {0, 255, 0},    // Green
    {0, 0, 255}     // Blue
  };

  if (currentMillis - breathingMillis >= breathingInterval) {
    breathingMillis = currentMillis;

    if (increasing) {
      brightnessValue += 5;
      if (brightnessValue >= 255) increasing = false;
    } else {
      brightnessValue -= 5;
      if (brightnessValue <= 0) {
        increasing = true;
        colorIndex = (colorIndex + 1) % 3;
      }
    }

    applyColor((colors[colorIndex][0] * brightnessValue) / 255, 
               (colors[colorIndex][1] * brightnessValue) / 255, 
               (colors[colorIndex][2] * brightnessValue) / 255);
  }
}

void setFlashingMode() {
  if (!isLightOn) {
    applyColor(0, 0, 0);
    return;
  }
  static bool isOn = false;
  unsigned long currentMillis = millis();

  if (currentMillis - flashMillis >= flashingInterval) {
    flashMillis = currentMillis;
    isOn = !isOn;

    if (isOn) {
      applyColor(currentRed, currentGreen, currentBlue);
    } else {
      applyColor(0, 0, 0);
    }
  }
}

void setColorCycle() {
  if (!isLightOn) {
    applyColor(0, 0, 0);
    return;
  }
  static int targetRed = 255, targetGreen = 0, targetBlue = 0;
  unsigned long currentMillis = millis();

  if (currentMillis - colorChangeMillis >= colorCycleInterval) {
    colorChangeMillis = currentMillis;

    currentRed = smoothTransition(currentRed, targetRed, 5);
    currentGreen = smoothTransition(currentGreen, targetGreen, 5);
    currentBlue = smoothTransition(currentBlue, targetBlue, 5);

    applyColor(currentRed, currentGreen, currentBlue);

    if (currentRed == 255 && currentGreen < 255 && currentBlue == 0) {
      targetGreen = 255;
      targetRed = 0;
    } else if (currentGreen == 255 && currentRed == 0 && currentBlue < 255) {
      targetBlue = 255;
      targetGreen = 0;
    } else if (currentBlue == 255 && currentGreen == 0 && currentRed < 255) {
      targetRed = 255;
      targetBlue = 0;
    }
  }
}

void setRainbowMode() {
  if (!isLightOn) {
    applyColor(0, 0, 0);
    return;
  }
  static int colorIndex = 0;
  unsigned long currentMillis = millis();

  int colors[7][3] = {
    {255, 0, 0},     // Red
    {255, 165, 0},   // Orange
    {255, 255, 0},   // Yellow
    {0, 255, 0},     // Green
    {0, 0, 255},     // Blue
    {75, 0, 130},    // Indigo
    {238, 130, 238}  // Violet
  };

  if (currentMillis - rainbowMillis >= rainbowInterval) {
    rainbowMillis = currentMillis;

    currentRed = smoothTransition(currentRed, colors[colorIndex][0], 5);
    currentGreen = smoothTransition(currentGreen, colors[colorIndex][1], 5);
    currentBlue = smoothTransition(currentBlue, colors[colorIndex][2], 5);

    applyColor(currentRed, currentGreen, currentBlue);

    if (currentRed == colors[colorIndex][0] && currentGreen == colors[colorIndex][1] && currentBlue == colors[colorIndex][2]) {
      colorIndex = (colorIndex + 1) % 7;
    }
  }
}

void setStaticColor() {
  if (isLightOn) {
    applyColor(currentRed, currentGreen, currentBlue);
  }
}

void updateMode() {
  if (!isLightOn) {
    // Turn off all LEDs when the light is off
    applyColor(0, 0, 0);
    return;  // Exit the function if the light is off
  }

  if (currentMode == "static") {
    setStaticColor();
  } else if (currentMode == "breath") {
    setBreathingEffect();
  } else if (currentMode == "flash") {
    setFlashingMode();
  } else if (currentMode == "cycle") {
    setColorCycle();
  } else if (currentMode == "rainbow") {
    setRainbowMode();
  }
}

// WebServer and LCD Setup
void setup() {
  // Setup RGB LED pins
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  // Setup button pins with internal pull-up resistors
  pinMode(buttonForwardPin, INPUT_PULLUP);
  pinMode(buttonReversePin, INPUT_PULLUP);

  // Start serial communication for debugging
  Serial.begin(115200);

  // Setup Wi-Fi
  WiFi.config(local_IP, gateway, subnet);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Setup the LCD
  Wire.begin(27, 14);  // Set custom pins for SDA and SCL
  lcd.init();
  delay(500);  // Wait for LCD initialization
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Voltage monitor");

  // Start the web server
  server.begin();
  Serial.println("Server started");

  // Setup WebServer routes for RGB LED control
  server.on("/turnOn", []() {
    isLightOn = true;
    server.send(200, "text/plain", "Lights turned on");
  });

  server.on("/turnOff", []() {
    isLightOn = false;
    server.send(200, "text/plain", "Lights turned off");
  });

  server.on("/brightness", []() {
    if (server.hasArg("value")) {
      brightness = server.arg("value").toInt();
      setStaticColor();
      server.send(200, "text/plain", "Brightness updated");
    }
  });

  server.on("/setColor", []() {
    if (server.hasArg("red") && server.hasArg("green") && server.hasArg("blue")) {
      currentRed = server.arg("red").toInt();
      currentGreen = server.arg("green").toInt();
      currentBlue = server.arg("blue").toInt();
      setStaticColor();
      server.send(200, "text/plain", "Color updated");
    }
  });

  server.on("/mode", []() {
    if (server.hasArg("mode")) {
      currentMode = server.arg("mode");
      server.send(200, "text/plain", "Mode set to " + currentMode);
    }
  });

  server.begin();
}

void loop() {
  // Handle RGB control through WebServer
  server.handleClient();
  updateMode();  // Continuously run the current mode

  unsigned long currentMillis = millis();

  // Read button states with debounce logic
  if ((currentMillis - lastDebounceTime) > debounceDelay) {
    if (digitalRead(buttonForwardPin) == LOW) {  // Button connected to pin 25 pressed
      lastDebounceTime = currentMillis;
      colorIndex = (colorIndex + 1) % numColors;  // Cycle to the next color
      setColorFromIndex();
    }

    if (digitalRead(buttonReversePin) == LOW) {  // Button connected to pin 32 pressed
      lastDebounceTime = currentMillis;
      colorIndex = (colorIndex - 1 + numColors) % numColors;  // Cycle to the previous color
      setColorFromIndex();
    }
  }

  // Check if it's time to update the LCD based on millis()
  if (currentMillis - previousLcdMillis >= lcdUpdateInterval) {
    previousLcdMillis = currentMillis;

    // Update voltage on the LCD
    voltage = random(voltageMin * 100, voltageMax * 100) / 100.0;
    lcd.setCursor(0, 1);
    lcd.print("Voltage: ");
    lcd.print(voltage);
    lcd.print(" V   ");  // Add extra spaces to clear any old text
  }
}
