#include <MPU6050.h>  // Include the library for the MPU6050 sensor

#define KP 1.0
#define KI 0.00
#define KD 0.00
#define KDV 30
#define MOTOR_MAX 255
#define MOTOR_MIN 100
#define IN1 32
#define IN2 26
#define IN3 27
#define IN4 14
#define TIME_PID 2000
#define TIME_START 500
#define ANGLE_ZERO -18
#define ANGLE_CRASH 30
#define ANGLE_BALANCE_MIN 0.3
#define ANGLE_BALANCE_MAX 5
#define ERROR_MIN KDV * ANGLE_BALANCE_MIN
#define ERROR_MAX KDV * ANGLE_BALANCE_MAX
#define TO_DEG 57.2957f
#define TIME_GYRO 2000
#define FK 0.99

MPU6050 accgyro;

unsigned long time_start;
unsigned long time_timer;
unsigned long time_regul;
bool isCRASH = false;

int16_t ax_raw, ay_raw, az_raw, gx_raw, gy_raw, gz_raw;
float ax, ay, az;
float angle_ay, angleY = 0, angleIntegral = 0.0;
float gyro_x_zero = 0, gyro_y_zero = 0, gyro_z_zero = 0;
float errorPID = 0.0, Speed = 0.0, gy = 0.0;

void setup() {
  Serial.begin(9600);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  stopMotors();

  accgyro.initialize();
  calibrate_gyro();
  isCRASH = true;

  time_start = millis();
  while (millis() - time_start < TIME_START) {
    getGyroData();
  }
}

void loop() {
  getGyroData();
  if (isCRASH) {
    stopMotors();
  } else {
    PID_regulator();
  }

  Serial.println(String(0) + " " + String(angleY - ANGLE_ZERO));
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void PID_regulator() {
  if (time_regul < micros()) {
    time_regul = micros() + TIME_PID;
    angleIntegral += (angleY - ANGLE_ZERO);

    errorPID = KP * (angleY - ANGLE_ZERO) + KD * gy + KI * angleIntegral;

    if (errorPID > 0)
      Speed = Speed - map(errorPID * KDV, ERROR_MIN, ERROR_MAX, MOTOR_MIN, MOTOR_MAX);
    else
      Speed = Speed + map(-errorPID * KDV, ERROR_MIN, ERROR_MAX, MOTOR_MIN, MOTOR_MAX);

    setSpeedMotors(Speed);
  }
}

void getGyroData() {
  if (time_timer < micros()) {
    time_timer = micros() + TIME_GYRO;
    accgyro.getMotion6(&ax_raw, &ay_raw, &az_raw, &gx_raw, &gy_raw, &gz_raw);

    gy = (gy_raw - gyro_y_zero) / 131.0;

    ax = ax_raw / 16384.0;
    az = az_raw / 16384.0;

    angle_ay = TO_DEG * atan2(-az, -ax);

    angleY = angleY + gy * TIME_GYRO / 1000000.0;

    angleY = angleY * FK + angle_ay * (1 - FK);

    if ((angleY - ANGLE_ZERO >= ANGLE_CRASH) || (angleY - ANGLE_ZERO <= -ANGLE_CRASH)) {
      isCRASH = true;
      angleIntegral = 0;
    } else {
      isCRASH = false;
    }
  }
}

void calibrate_gyro() {
  int i = 0;
  int NUM_CALIBRATE = 100;
  while (i < NUM_CALIBRATE) {
    if (time_timer < micros()) {
      time_timer = micros() + TIME_GYRO;
      accgyro.getMotion6(&ax_raw, &ay_raw, &az_raw, &gx_raw, &gy_raw, &gz_raw);
      gyro_x_zero += gx_raw;
      gyro_y_zero += gy_raw;
      gyro_z_zero += gz_raw;
      i++;
    }
  }
  gyro_x_zero /= NUM_CALIBRATE;
  gyro_y_zero /= NUM_CALIBRATE;
  gyro_z_zero /= NUM_CALIBRATE;

  Serial.println("Gyro calibration complete.");
}

void setSpeedMotors(float speed) {
  // Implement the motor control logic
  analogWrite(IN1, speed);
  analogWrite(IN2, speed);
  analogWrite(IN3, speed);
  analogWrite(IN4, speed);
}
