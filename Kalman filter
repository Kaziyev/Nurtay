#include <Wire.h>
#include "MPU6050.h"

MPU6050 mpu;

// Класс фильтра Калмана для одного угла
class Kalman {
public:
  float Q_angle;   // шум процесса (акселерометр)
  float Q_bias;    // шум дрейфа гироскопа
  float R_measure; // шум измерения

  float angle;     // оценённый угол
  float bias;      // оценённый дрейф
  float rate;      // скорректированная угловая скорость

  float P[2][2];   // ковариационная матрица ошибки

  Kalman() {
    Q_angle = 0.001;
    Q_bias = 0.003;
    R_measure = 0.03;
    angle = 0.0;
    bias = 0.0;
    P[0][0] = 0.0; P[0][1] = 0.0;
    P[1][0] = 0.0; P[1][1] = 0.0;
  }

  // Функция обновления фильтра Калмана
  float getAngle(float newAngle, float newRate, float dt) {
    // Прогноз: интегрируем угловую скорость
    rate = newRate - bias;
    angle += dt * rate;
    
    // Прогнозирование ошибки
    P[0][0] += dt * ( dt * P[1][1] - P[0][1] - P[1][0] + Q_angle );
    P[0][1] -= dt * P[1][1];
    P[1][0] -= dt * P[1][1];
    P[1][1] += Q_bias * dt;
    
    // Обновление с использованием измерения
    float S = P[0][0] + R_measure;
    float K0 = P[0][0] / S;
    float K1 = P[1][0] / S;
    float y = newAngle - angle;
    angle += K0 * y;
    bias  += K1 * y;
    
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];
    P[0][0] -= K0 * P00_temp;
    P[0][1] -= K0 * P01_temp;
    P[1][0] -= K1 * P00_temp;
    P[1][1] -= K1 * P01_temp;
    
    return angle;
  }
};

Kalman kalmanY;

float offsetY = 0.0;   // Смещение для обнуления угла (начальное положение)
unsigned long prevTime;

void setup() {
  Serial.begin(115200);
  Wire.begin();
  
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("Не удалось подключиться к MPU6050");
    while (1);
  }
  Serial.println("MPU6050 готов.");

  // Считываем начальное положение для обнуления угла
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  // Вычисляем угол по акселерометру (например, по оси Y)
  offsetY = atan2(ax, az) * 180.0 / PI;
  
  // Инициализируем фильтр Калмана с нулевым углом
  kalmanY.angle = 0.0;
  
  prevTime = millis();
}

void loop() {
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  
  // Вычисление dt
  unsigned long now = millis();
  float dt = (now - prevTime) / 1000.0;
  prevTime = now;
  
  // Получаем "сырой" угол по акселерометру и обнуляем по offsetY
  float accAngle = atan2(ax, az) * 180.0 / PI;
  accAngle -= offsetY;
  
  // Получаем угловую скорость с гироскопа (в градусах/сек)
  float gyroRate = gy / 131.0;
  
  // Фильтруем угол с помощью фильтра Калмана
  float filteredAngle = kalmanY.getAngle(accAngle, gyroRate, dt);
  
  // Выводим отфильтрованный угол
  Serial.print("Angle (filtered): ");
  Serial.println(filteredAngle, 2);
  
  delay(10);
}
