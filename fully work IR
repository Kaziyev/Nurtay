
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <time.h>
#include <sys/time.h>
#include <vector>

const char* ssid = "Borealis Laboratory";
const char* password = "artofwar3";

// Соответствие пинов и уровней давления


struct Sensor {
  int pin;
  float pressure;
  std::vector<String> times;
  int prevValue;
  unsigned long lastReadTime;

  Sensor(int _pin, float _pressure) {
    pin = _pin;
    pressure = _pressure;
    prevValue = LOW;
    lastReadTime = 0;
  }
};

// Все датчики давления
Sensor sensors[] = {
  Sensor(13, 0.0),
  Sensor(12, 0.5),
  Sensor(14, 1.0),
  Sensor(27, 1.5),
  Sensor(26, 2.0),
  Sensor(25, 2.5),
  Sensor(33, 3.0),
  Sensor(32, 3.5),
  Sensor(35, 4.0),
  Sensor(34, 4.5)
};

AsyncWebServer server(80);

const char htmlPage[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Pressure Timer</title>
  <style>
    body { font-family: Arial; text-align: center; margin-top: 30px; }
    .container { max-width: 900px; margin: 0 auto; }
    .data-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      font-size: 1.2em;
    }
    .data-table th {
      background-color: #4CAF50;
      color: white;
      text-align: left;
      padding: 12px 15px;
    }
    .data-table td {
      border: 1px solid #ddd;
      padding: 12px 15px;
      text-align: left;
    }
    .data-table tr:nth-child(even) { background-color: #f2f2f2; }
    button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 12px 28px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 10px 5px;
      cursor: pointer;
      border-radius: 4px;
    }
    button:hover { background-color: #45a049; }
    .reset-btn { background-color: #f44336; }
    .reset-btn:hover { background-color: #d32f2f; }
    .buttons { margin: 20px 0; }
    h1 { color: #333; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Данные измерений давления</h1>
    <div class="buttons">
      <button id="downloadBtn">Скачать данные (Excel)</button>
      <button id="resetBtn" class="reset-btn">Очистить все данные</button>
    </div>
    <div id="data-container">
      Загрузка данных...
    </div>
  </div>
  <script>
    function updateData() {
      fetch('/data')
        .then(response => response.text())
        .then(data => {
          document.getElementById('data-container').innerHTML = data;
        });
    }
    setInterval(updateData, 1000);
    updateData();
    document.getElementById('downloadBtn').addEventListener('click', function() {
      fetch('/excel')
        .then(response => response.blob())
        .then(blob => {
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = 'pressure_data.csv';
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
        });
    });
    document.getElementById('resetBtn').addEventListener('click', function() {
      if (confirm('Вы уверены, что хотите удалить все данные?')) {
        fetch('/reset')
          .then(response => response.text())
          .then(data => {
            alert('Все данные удалены');
            updateData();
          });
      }
    });
  </script>
</body>
</html>
)rawliteral";

String getKazakhstanTimeWithMs() {
  char timeStr[30];
  struct timeval tv;
  gettimeofday(&tv, NULL);
  time_t now = tv.tv_sec;
  struct tm* timeinfo = localtime(&now);
  sprintf(timeStr, "%02d:%02d:%02d.%03d", timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec, (int)(tv.tv_usec / 1000));
  return String(timeStr);
}

void setup() {
  Serial.begin(115200);
  for (auto& sensor : sensors) pinMode(sensor.pin, INPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.println(WiFi.localIP());

  configTime(5 * 3600, 0, "pool.ntp.org", "time.nist.gov");

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", htmlPage);
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request){
    String result = "<table class='data-table'>";
    result += "<tr><th>Pressure (bar)</th><th>Time</th></tr>";
    bool hasData = false;
    for (auto& sensor : sensors) {
      for (auto& t : sensor.times) {
        result += "<tr><td>" + String(sensor.pressure, 1) + " bar</td><td>" + t + "</td></tr>";
        hasData = true;
      }
    }
    if (!hasData) {
      result += "<tr><td colspan='2' style='text-align:center;'>Нет данных</td></tr>";
    }
    result += "</table>";
    request->send(200, "text/html", result);
  });

  server.on("/excel", HTTP_GET, [](AsyncWebServerRequest *request){
    String csv = "Pressure (bar);Time\r\n";
    for (auto& sensor : sensors) {
      for (auto& t : sensor.times) {
        csv += String(sensor.pressure, 1) + "bar;" + t + "\r\n";
      }
    }
    if (csv.length() <= 20) {
      for (auto& sensor : sensors) {
        csv += String(sensor.pressure, 1) + "bar;Not measured\r\n";
      }
    }
    AsyncWebServerResponse *response = request->beginResponse(200, "text/csv", csv);
    response->addHeader("Content-Disposition", "attachment; filename=pressure_data.csv");
    request->send(response);
  });

  server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request){
    for (auto& sensor : sensors) sensor.times.clear();
    Serial.println("All data has been reset");
    request->send(200, "text/plain", "OK");
  });

  server.begin();
}

void loop() {
  unsigned long currentMillis = millis();

  for (auto& sensor : sensors) {
    int value = digitalRead(sensor.pin);

    if (value == HIGH && sensor.prevValue == LOW) {
      // Проверка задержки
      if (currentMillis - sensor.lastReadTime >= 5000) {
        String t = getKazakhstanTimeWithMs();
        sensor.times.push_back(t);
        sensor.lastReadTime = currentMillis;
        Serial.printf("%.1f bar time: %s\n", sensor.pressure, t.c_str());
      }
    }

    sensor.prevValue = value;
  }
}
